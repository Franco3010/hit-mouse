{"version":3,"sources":["index.tsx"],"names":["canvas","createStage","getCanvas","viewport","createViewport","inputHandler","createViewportAwareInputHandler","store","x","y","score","Realscore","hitBoss","init","a","gl","getContext","camera","getCamera","batch","createBatch","whiteTex","createWhiteTexture","loadTexture","number1","number2","number3","number4","number5","number6","number7","number8","number9","number0","background","loadAtlas","mainAtlas","runRegions","findRegions","runRegions1","runAnimation1","createAnimation","runAnimation","moles","accumulate","signal","stateTime","clearColor","createGameLoop","delta","push","x1","Math","random","clear","COLOR_BUFFER_BIT","setProjection","combined","begin","draw","mole","getKeyFrame","PlayMode","LOOP","setTimeout","splice","i","toString","length","setColor","end","window","addEventListener","e","targetY","getTouchedWorldCoord","targetX","console","log","this","touchX","touches","screenX","touchY","screenY"],"mappings":"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","file":"static/js/main.c2e26196.chunk.js","sourcesContent":["import './index.css';\nimport {\n  createAnimation,\n  createBatch,\n  createGameLoop,\n  createStage,\n  createViewport,\n  createViewportAwareInputHandler,\n  createWhiteTexture,\n  loadAtlas,\n  loadTexture,\n  PlayMode,\n  Vector2\n} from 'gdxjs';\nimport { time } from 'console';\n\n// WebGL\nconst stage = createStage();\nconst canvas = stage.getCanvas();\nconst viewport = createViewport(canvas, 50, 100);\nlet count = 0\nconst inputHandler = createViewportAwareInputHandler(canvas, viewport);\nlet store = {\n  x: 5,\n  y: 5\n}\nlet score = 0;\nlet Realscore = \"\";\nlet hitBoss = 0\nlet hitted = 1\n\nconst init = async () => {\n  // const stage = createStage();\n  // const canvas = stage.getCanvas();\n\n  // const viewport = createViewport(canvas, 50, 100);\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n\n\n\n  const batch = createBatch(gl);\n  const whiteTex = createWhiteTexture(gl);\n  const moleImg = await loadTexture(gl, './mole.png');\n  const number1 = await loadTexture(gl, './1.png');\n  const number2 = await loadTexture(gl, './2.png');\n  const number3 = await loadTexture(gl, './3.png');\n  const number4 = await loadTexture(gl, './4.png');\n  const number5 = await loadTexture(gl, './5.png');\n  const number6 = await loadTexture(gl, './6.png');\n  const number7 = await loadTexture(gl, './7.png');\n  const number8 = await loadTexture(gl, './8.png');\n  const number9 = await loadTexture(gl, './9.png');\n  const number0 = await loadTexture(gl, './0.png');\n  const scoreImg = await loadTexture(gl, './score.png');\n\n\n  const background = await loadTexture(gl, './background.png');\n  const mainAtlas = await loadAtlas(gl, './enemy.atlas', {});\n  const runRegions = mainAtlas.findRegions('boss_projectile_A');\n  const runRegions1 = mainAtlas.findRegions('boss_die');\n  const runAnimation1 = createAnimation(0.4, runRegions1)\n  const runAnimation = createAnimation(0.1, runRegions);\n\n\n  const moles: { x1: number; y: number }[] = [];\n  let indexMemo = 0;\n  let indexMole = 0;\n  const DROP_RATE = 4;\n  let accumulate = 0;//?\n  const mole_SIZE = 10;\n\n  let oldstore = {\n    x: 0,\n    y: 0\n  }\n  let signal = 1\n  let drawSignal = 0;\n  let stateTime = 0;//?\n  let accumulateScore = 0;\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n\n    accumulate += delta;\n\n\n\n    if (accumulate > DROP_RATE) {\n      accumulate = 0;\n\n      moles.push({\n        x1: Math.random() * 50,\n        y: 15 / Math.random(),\n\n\n      });\n\n      signal = 0\n\n\n    }\n    // for (let mole of moles) {\n    //   let index = moles.indexOf(mole)\n    //   if (mole.x1 <= 5 ||\n    //     mole.y >= 90 ||\n    //     mole.x1 >= 40 ||\n    //     mole.y <= 10) {\n    //     moles.splice(index, 1)\n\n    //   }\n    // }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.draw(whiteTex, 0, 0, 50, 100);\n    batch.draw(background, 0, 0, 50, 100);\n    stateTime += delta;\n    for (let mole of moles) {\n      if (hitBoss == 0) {\n        runAnimation1\n          .getKeyFrame(stateTime, PlayMode.LOOP)\n          .draw(batch, mole.x1, mole.y, 10, 10);\n      }\n      else {\n        runAnimation\n          .getKeyFrame(stateTime, PlayMode.LOOP)\n          .draw(batch, mole.x1, mole.y, 10, 10);\n\n      }\n\n      // batch.draw(\n      //   moleImg,\n      //   mole.x1,\n      //   mole.y,\n      //   mole_SIZE,\n      //   mole_SIZE\n      // );\n      if (signal == 0) {\n        store.x = mole.x1\n        store.y = mole.y\n        signal = 1\n      }\n\n\n      setTimeout(function () {\n\n\n        moles.splice(0, 1)\n\n\n      }, 2000)\n    }\n\n\n\n\n\n\n\n\n    indexMemo = 1;\n\n    // batch.draw(scoreImg, 2, 0, 10, 10)\n    Realscore = score.toString();\n    for (var i = Realscore.length - 1; i >= 0; i--) {\n      switch (Realscore[i]) {\n        case \"0\":\n          batch.draw(number0, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"1\":\n          batch.draw(number1, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"2\":\n          batch.draw(number2, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"3\":\n          batch.draw(number3, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"4\":\n          batch.draw(number4, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"5\":\n          batch.draw(number5, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"6\":\n          batch.draw(number6, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"7\":\n          batch.draw(number7, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"8\":\n          batch.draw(number8, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"9\":\n          batch.draw(number9, 10 + 2 * i, 0, 2, 2)\n          break;\n\n      }\n\n    }\n\n\n\n\n\n\n    batch.setColor(0.4, 0.4, 0.4, 1);\n\n    batch.setColor(1, 1, 1, 1);\n\n\n\n\n    batch.end();\n\n\n\n\n\n\n  });\n\n};\n\n\nwindow.addEventListener(\"click\", function (e) {\n\n  let targetY = inputHandler.getTouchedWorldCoord().y;\n  const targetX = inputHandler.getTouchedWorldCoord().x;\n\n\n  if (targetX <= store.x + 6 &&\n    targetX >= store.x + 2.7 &&\n    targetY >= store.y + 1.5 &&\n    targetY <= store.y + 5.2\n  ) {\n    score++\n    console.log(hitBoss)\n    hitBoss = 1\n    store.x = 3\n    store.y = 3\n\n  }\n\n  this.setTimeout(function () {\n    hitBoss = 0\n  }, 1000)\n\n})\n\nwindow.addEventListener(\"touchstart\", function (e) {\n  let targetY = inputHandler.getTouchedWorldCoord().y;\n  const targetX = inputHandler.getTouchedWorldCoord().x;\n  let touchX = e.touches[0].screenX\n  let touchY = e.touches[0].screenY\n  touchX = targetX\n  touchY = targetY\n\n\n  if (touchX <= store.x + 6 &&\n    touchX >= store.x + 2.7 &&\n    touchY >= store.y + 1.5 &&\n    touchY <= store.y + 5.2\n  ) {\n    score++\n    console.log(score)\n    hitBoss = 1\n\n    store.x = 3\n    store.y = 3\n\n  }\n  this.setTimeout(function () {\n    hitBoss = 0\n  }, 1000)\n\n})\n\ninit();\n\n/**\n * 1. Typescript\n * 2. WebGL\n * 3. Async/await, promise\n */\n"],"sourceRoot":""}